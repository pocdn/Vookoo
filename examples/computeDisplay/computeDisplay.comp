#version 460

layout (local_size_x_id = 0, local_size_y_id = 1) in; // _id to set values via specialization constants 
layout (local_size_z = 1) in; // no need to specialize so set directly

// Get values through push constant
layout (push_constant) uniform Uniform {
  float time;
  int Nx, Ny;
};

// Write values out through a storage buffer 
layout(std430, set = 0, binding=0) buffer Buffer {
  float values[];
};

void main() {
  // id is 0, 1 ... Nx*Ny-1
  uint id = gl_GlobalInvocationID.x + Nx*gl_GlobalInvocationID.y; // x + rows * y

  // Store the value in the output buffer.
  // Note: id may be greater than the number of instances
  // and you may need to check against the size of the values array.
  vec2 p = vec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y) - 0.5*vec2(Nx,Ny);
  float R = sqrt(dot(p,p));
  values[id] = cos(6.28*(R-0.25*time)/float(Nx/4));
}

